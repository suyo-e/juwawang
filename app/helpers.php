<?php

/**
 * Global helpers file with misc functions.
 */
if (! function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (! function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (! function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (! function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (! function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory.$filename)) {
                array_push($directory_list, $directory.$filename.'/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory.'*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (! function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (! function_exists('upload')) {
    function upload($request, $name) {
        $image_path = '/files';
        $path = '';
        if ($request->hasFile($name) && $request->file($name)->isValid()){
            $extension = $request->$name->extension();
            $filename = md5(time(). '-' . $request->$name->getClientOriginalName()) .".".$extension ;
            $request->file($name)->move(public_path($image_path), $filename);
            $path = $image_path."/$filename";
        }

        return $path;
    }
}

if (! function_exists('_get')) {
    function _get($key, $val = '') {
        return isset($_GET[$key])?$_GET[$key]: $val;
    }
}

if (! function_exists('_is_banner_recommand')) {
    function _is_banner_recommand($type) {
        return in_array($type, array(0,1,2));
    }
}

if (! function_exists('render_image')) {
    function render_image(){
        return 'data!=""?"<img src=\""+data+"\" height=\"50\"/>":"暂无图片"';
    }
}

if (! function_exists('render_category_type')) {
    function render_category_type() {
        return 'function(data) {
            switch(data){
            case '.\App\Models\Backend\Category::TYPE_USER.':
                return "用户注册";
            case '.\App\Models\Backend\Category::TYPE_AGENT.':
                return "经销商注册";
            case '.\App\Models\Backend\Category::TYPE_MANUFACTURER.':
                return "厂商注册";
            case '.\App\Models\Backend\Category::TYPE_USER_PRODUCT.':
                return "用户商品发布";
            case '.\App\Models\Backend\Category::TYPE_AGENT_PRODUCT.':
                return "经销商商品发布";
            case '.\App\Models\Backend\Category::TYPE_MANUFACTURER_PRODUCT.':
                return "厂商商品发布";
            default:
                return data;
            }
        }(data);';
    }
}

if(! function_exists('province_city')) {
    function province_city($province_city){
        $province_city = explode(',', $province_city);
        $data = array();
        $data['prov_id'] = isset($province_city[0]) ? $province_city[0]: '';
        $data['city_id'] = isset($province_city[1]) ? $province_city[1]: '';
        $data['area_id'] = isset($province_city[2]) ? $province_city[2]: '';

        return $data;
    }
}

if(! function_exists('province_city_name')) {
    function province_city_name($obj){
        $gb2260 = new \GB2260\GB2260();

        if(isset($obj->area_id) && $obj->area_id != '') {
            $name = $gb2260->get($obj->area_id);
        }
        else {
            #$prov = $gb2260->get($obj->prov_id);
            $name = $gb2260->get($obj->city_id);
        }

        $code = implode(',', array(
            $obj->prov_id,
            $obj->city_id,
            $obj->area_id
        )); 
        $obj->province_city_name = $name;
        $obj->province_city = $code;
        return $obj;
    }
}

if(!function_exists('get_profile_types')) {

    function get_profile_types($type) {
        switch($type) {
        case \App\Models\Backend\Category::TYPE_USER:
            return array(
                \App\Models\Backend\Category::TYPE_AGENT
            );
        case \App\Models\Backend\Category::TYPE_AGENT:
            return array(
                \App\Models\Backend\Category::TYPE_AGENT,
                \App\Models\Backend\Category::TYPE_MANUFACTURER
            );
        case \App\Models\Backend\Category::TYPE_MANUFACTURER:
            return array(
                \App\Models\Backend\Category::TYPE_AGENT,
                \App\Models\Backend\Category::TYPE_MANUFACTURER
            );
        }
    }
}



if(! function_exists('get_product_types')){ 
    function get_product_types( $profile_type ) {

        switch($profile_type) {
        //用户只能看用户和经销商
        case \App\Models\Backend\Category::TYPE_USER:
            return array(
                \App\Models\Backend\Category::TYPE_USER_PRODUCT,
                \App\Models\Backend\Category::TYPE_AGENT_PRODUCT
            );
        //经销商看全部
        case \App\Models\Backend\Category::TYPE_AGENT:
            return array(
                \App\Models\Backend\Category::TYPE_USER_PRODUCT,
                \App\Models\Backend\Category::TYPE_AGENT_PRODUCT,
                \App\Models\Backend\Category::TYPE_MANUFACTURER_PRODUCT
            );
        case \App\Models\Backend\Category::TYPE_MANUFACTURER:
            return array(
                \App\Models\Backend\Category::TYPE_AGENT_PRODUCT,
				\App\Models\Backend\Category::TYPE_MANUFACTURER_PRODUCT
			);
        default:
            return null;
        }
    }
}

if(!function_exists('get_categories')) {

    function get_categories($type, $parent_id = 0) 
    {
        $categories = \App\Models\Backend\Category::select('display_name', 'id', 'pic_url');

        if($parent_id) 
            $categories = $categories->where('parent_id', $parent_id);
        else
            $categories = $categories->where('parent_id', 0);

        switch($type) {
        case \App\Models\Backend\Category::TYPE_USER:
            $categories = $categories->where('type', \App\Models\Backend\Category::TYPE_AGENT);
            break;
        case \App\Models\Backend\Category::TYPE_AGENT:
            $categories = $categories->whereIn('type', array(
                \App\Models\Backend\Category::TYPE_AGENT,
                \App\Models\Backend\Category::TYPE_MANUFACTURER
            ));
            break;
        case \App\Models\Backend\Category::TYPE_MANUFACTURER:
            //$categories = $categories->where('type', \App\Models\Backend\Category::TYPE_MANUFACTURER);
            $categories = $categories->whereIn('type', array(
                \App\Models\Backend\Category::TYPE_AGENT,
                \App\Models\Backend\Category::TYPE_MANUFACTURER
            ));
            break;
        }

        $categoryes = $categories->orderBy('updated_at', 'desc');
        $categories = $categories->get();

        return $categories;
    }
}

if(!function_exists('get_product_categories')) {

    function get_product_categories($type = 0) 
    {
        $categories = \App\Models\Backend\Category::select('display_name', 'id')
            ->where('parent_id', 0);

        switch($type) {
        case \App\Models\Backend\Category::TYPE_USER:
            $type = \App\Models\Backend\Category::TYPE_USER_PRODUCT;
            break;
        case \App\Models\Backend\Category::TYPE_AGENT:
            $type = \App\Models\Backend\Category::TYPE_AGENT_PRODUCT;
            break;
        case \App\Models\Backend\Category::TYPE_MANUFACTURER:
            $type = \App\Models\Backend\Category::TYPE_MANUFACTURER_PRODUCT;
            break;
        default: 
            break;
        }
        if($type) {
            $categories = $categories->where('type', $type);
        }
        $categories = $categories->get();

        return $categories;
    }
}

if(!function_exists('get_profile_type_name')) {

    function get_profile_type_name($type) {
        switch($type) {
        case \App\Models\Backend\Category::TYPE_USER:
            return '用户';
            break;
        case \App\Models\Backend\Category::TYPE_AGENT:
            return '经销商';
            break;
        case \App\Models\Backend\Category::TYPE_MANUFACTURER:
            return '厂商';
            break;
        }
    }
}

if(!function_exists('is_profile_type_permission')) {

    function is_profile_type_permission($type, $profile_type) {
        switch($type) {
        case \App\Models\Backend\Category::TYPE_USER:
            return in_array($profile_type, array(
                \App\Models\Backend\Category::TYPE_AGENT
            ));
        case \App\Models\Backend\Category::TYPE_AGENT:
            return in_array($profile_type, array(
                \App\Models\Backend\Category::TYPE_AGENT,
                \App\Models\Backend\Category::TYPE_MANUFACTURER
            ));
        case \App\Models\Backend\Category::TYPE_MANUFACTURER:
            return in_array($profile_type, array(
                \App\Models\Backend\Category::TYPE_AGENT,
                \App\Models\Backend\Category::TYPE_MANUFACTURER
            ));
        }
    }
}

if(!function_exists('is_product_type_permission')) {

    function is_product_type_permission($type, $profile_type) {
        switch($type) {
        case \App\Models\Backend\Category::TYPE_USER:
            return in_array($profile_type, array(
                \App\Models\Backend\Category::TYPE_AGENT
            ));
        case \App\Models\Backend\Category::TYPE_AGENT:
            return in_array($profile_type, array(
                \App\Models\Backend\Category::TYPE_AGENT,
                \App\Models\Backend\Category::TYPE_MANUFACTURER
            ));
        case \App\Models\Backend\Category::TYPE_MANUFACTURER:
            return in_array($profile_type, array(
                \App\Models\Backend\Category::TYPE_AGENT,
                \App\Models\Backend\Category::TYPE_MANUFACTURER
            ));
        }
    }
}

if(!function_exists('is_profile_identity')) {
    function is_profile_identity($is_identity) {
        switch($is_identity) {
        case 0:
            return '<span>未认证</span>';
            break;
        case 1:
            return '<span>认证中</span>';
            break;
        case 2:
            return '<span style="background-color:#F4BE46">已认证</span>';
            break;
        case 3:
        case 4:
            break;
        }
    }
}

if(!function_exists('is_li_select')) {
    function is_li_select($val1, $val2) {
        return $val1==$val2?'<img src="/image/right.pic" style="width:1.5rem">':'';
    }
}

if(!function_exists('li_filter_render')) {
    function li_filter_render($name, $value, $display_name) {
        $params = request()->all();
        $current_value = request()->input($name);
        $params[$name] = $value;
        $filter_url = url()->current().'?'.http_build_query($params);

        $is_selected = $current_value == $value ? '<img src="/image/right.pic" style="width:1.5rem">':'';

        return "
            <li onclick='javascript:location.href=\"$filter_url\"'> 
                $display_name $is_selected
            </li>
        ";
    }
}
